项目上线、HTML、CSS、JS文件压缩合并
语法转换（es6、less）
公共文件抽离
修改文件浏览器自动刷新



Gulp使用
1.使用npm install gulp下载gulp库文件
2.在项目根目录下建立gulpfile.js文件
3.重构项目文件夹结构src目录放置源代码文件 dist目录放置构建后文件
4.在gulpfile.js文件中编写任务
5.在命令行工具中执行gulp任务
gulp中提供的方法
gulp.src():获取任务要处理的文件
gulp.dest():输出文件
gulp.task():建立gulp任务
gulp.watch():监控文件的变化

//引入gulp模块
const gulp=require('gulp');
//使用gulp.task()方法建立任务(参数1：任务的名称，参数2：任务的回调函数)
gulp.task('first',()=>{
    console.log('我们人生中的第一个gulp任务执行了')
    //获取要处理的文件
    gulp.src('./src/css/base.css');
    //转换、压缩等一些操作
    //.pipe()
    //将处理后的文件输出到dist目录
    .pipe(gulp.dest('./dist/css'));
})
gulp第三方模块，除了提供库文件以外，还提供了同名的命令行工具，可以让我们使用它提供的命令来执行这个任务

npm install gulp-cli -g  //(库文件是本地安装 命令工具是全局安装)
gulp first  // 执行first任务的回调函数

网站：www.npmjs.com
gulp插件
    gulp-htmlmin:html文件压缩
    gulp-csso:压缩css
    gulp-babel:JavaScript语法转化
    gulp-less:less语法转化
    gulp-ugify:压缩混淆JavaScript
    gulp-file-include公共文件包含
    browsersync浏览器实时同步
插件使用步骤：
    1.通过npm下载插件
    2.在gulpfile.js文件中引入插件
    3.调用插件
//html任务
//1.html文件中代码的压缩操作
//2.抽取html文件中的公共代码
const gulp=require('gulp');
const htmlmin=require('gulp-htmlmin');
const fileinclude=require('gulp-file-include');

gulp.task('htmlmin',()=>{
    gulp.src('./src/*.html')
        .pipe(fileinclude());
        .pipe(htmlmin({ collapseWhitespace: true }));
        .pipe(gulp.dest('dist'));
})
把公共部分抽取出来，再利用@@include() 引入

//css任务
//1.less语法转换
//2.css代码压缩
const less=require('gulp-less');
const csso=require('gulp-csso');
gulp.task('cssmin',()=>{
    //选择css目录下的所有less文件以及css文件
    gulp.src(['./src/css/*.less','./src/css/*.css'])
        //将less语法转化为css语法
        .pipe(less())
        //将css代码进行压缩
        .pipe(csso())
        //将处理的结果进行输出
        .pipe(gulp.dest('dist/css'))
})

//js任务
//1.es6代码转换
//2.代码压缩
const babel=require('gulp-babel');//这个插件用来实现代码转换
const uglify=require('gulp-uglify');//这个插件用来实现代码压缩
gulp.task('jsmin',()=>{
    gulp.src('./src/js/*.js')
        .pipe(babel({
            //它可以判断当前代码的运行环境 将代码转换为当前运行环境所支持的代码
            presets:['@babel/env']
        }))
        .pipe(uglify);
        .pipe(gulp.dest('dist/js'))
})

//复制文件夹
gulp.task('copy',()=>{
    gulp.src('./src/images')
        .pipe(gulp.dest('dist/images'));
    gulp.src('./src/lib')
        .pipe(gulp.dest('dist/lib'));
})

//构建任务
gulp.task('default',['htmlmin','cssmin','jsmin','copy']);

node_modules文件件的问题
    1.文件夹以及文件过多过碎，当我们将项目整体拷贝给别人的时候，传输 速度会很慢很慢
    2.复杂的模块依赖关系被记录，确保模块的版本和当前保持一致，否则会导致当前项目运行报错

package.json文件的作用
    项目描述文件，记录了当前项目信息，例如名称、版本、作者、github地址，当前项目依赖了那些第三方模块等。
    使用npm init-y命令生成。

    {
      "name": "Gulp",
      "version": "1.0.0",
      "description": "",
      "main": "index.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1"
      },
      "keywords": [],
      "author": "",
      "license": "ISC"
    }

    npm install可以下载多个模块，模块之间用空格隔开

项目依赖
    在项目开发阶段和线上运营阶段，都需要依赖的第三方包，称为依赖项目
    使用npm install包命令下载的文件会默认被添加到package.json文件的dependencies字段中
    {
        "dependencies":{
            "jquery":"^3.3.1"
        }
    }
开发依赖
    在项目的开发阶段需要依赖，线上运营阶段不需要依赖的第三方包，称为开发依赖
    使用npm install包名--save-dev命令将包添加到package.json文件的devDependencies字段中
    {
        "devDependencies":{
            "gulp":"^3.91"
        }
    }
package-lock.json文件的作用
    当我们在下载第三方模块的时候，npm会同时产生package-lock.json文件，在这个文件中会详细记录模块与模块间的关系
    锁定包的版本，确保再次下载时不会因为包版本不同而产生问题
    加快下载速度，因为该文件中已经记录了项目所依赖第三方包的树状结构和包的下载地址，重新安装时只需下载即可，不需要做额外的工作

--save：将保存配置信息到pacjage.json。默认为dependencies节点中。
--dev：将保存配置信息devDependencies节点中。

--save：将保存配置信息到package.json的dependencies节点中。
--save-dev：将保存配置信息到package.json的devDependencies节点中。
dependencies：运行时的依赖，发布后，即生产环境下还需要用的模块
devDependencies：开发时的依赖。里面的模块是开发时用的，发布时用不到它。

Node.js的模块加载机制
模块查找规则-当模块拥有路径但没有后缀时
    require('./find.js')
    require('./find')
    1.require方法根据模块路径查找模块，如果是完整路径，直接引入模块
    2.如果模块后缀省略，先找同名JS文件再找同名JS文件夹
    3.如果找到同名文件夹，找文件夹中的index.js
    4.如果文件夹中没有index.js就会去当前文件夹中的package.js文件查找main选项的入口文件
    5.如果指定的入口文件不存在或者没有指定入口文件就会报错，模块没有找到
模块查找规则-当模块没有路径也没有后缀时
1. Node.js会假设它是 系统模块
2. Nodejs会先去node_ modules文件夹中
3.首先看是否有该名字的JS文件
4.再看是否有该名字的文件夹
5.如果是文件夹看里面是否有index.js
6.如果没有index.js查看该文件夹中的package.json中的main选项确定模块入口文件
7.否则找不到报错
