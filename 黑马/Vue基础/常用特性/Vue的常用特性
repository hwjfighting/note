表单操作
    input 单行文本
    textarea 多行文本
    select 下拉多选
    radio 单选框
    checkbox 多选框
    表单域修饰符
    number：转化为数值
    trim：去掉开始和结尾的空格
    lazy：将input事件切换为change事件
    <input v-model.number='age' type="number">

自定义指令
    Vue.directive('focus'{
        inserted:function(el){
        //获取元素的焦点
        el.focus();
        }
    })
    <input type="text" v-focus>

    带参数的自定义指令（改变元素背景色）对象，里面包含很多属性
    binding是一个
    Vue.directive('color',{
        inserted:function(el,binding){
            el.style.backgroundColor=binding.value.color;
        }
    })
    <input type="text" v-color='{color:"orange"}'>
    局部指令
    只能在本组件中使用
    directives:{
        focus:{
            //指令的定义
            inserted:function(el){
                el.focus()
            }
        }
    }

计算属性
    计算属性的用法
    computed:{
        reverseMessage:function(){
            return this.split('').reverse().join('')
        }
    }
    计算属性一般是没有set方法，只读属性

    计算属性与方法的区别
        methods和computed看起来都可以实现我们的功能,
        那么为什么还要多-个计算 属性这个东西呢?
        原因:计算属性会进行缓存,如果多次使用时,计算属性只会调用一次。


        计算属性是基于它们的依赖进行缓存的
        方法不存在缓存
    使用的时候当属性使用 不需要加括号


侦听器
    数据一旦发生变化就通知侦听器所绑定方法
    应用场景：数据变化时执行异步或开销较大的操作
    侦听器中的名字要和属性名保持一致

    watch:{
        firstName:function(val){
            //val表示变化之后的值
            this.fullName=val+this.lastName;
        },
        lastName:function(val){
            this.fullName=this.firstName+val;
        }
    }

过滤器
    作用：格式化数据，比如将字符串格式化为首字母大写，将日期格式化为指定的格式
    自定义过滤器：
    Vue.filter('过滤器名称',function(value){
        //过滤器业务逻辑
    })
    使用：
    <div>{{msg|upper}}</div>    //upper是过滤器名称
     <div>{{msg|upper|lower}}</div>   //msg先进行upper过滤，再进行 lower过滤
     <div v-bind:id="id|formatId"></div>
     局部过滤器  //只有在本组件中可以使用
     filters:{
        capitarize:function(){}
     }
     带参数的过滤器
     Vue.filter('format',function(value,arg1){  //value默认是要处理的data数据  ，使用时从第二个参数开始接收
        //value就是过滤器传递过来的参数
     })
     过滤器的使用
     <div>{{date|format('yyyy-MM-dd')}</div>

Vue的生命周期  function Vue(options)  options 可以传el  data
        methods  也可以传生命周期函数

列表渲染 维护状态
    变异（变更）方法 //修改原有数据 默认是响应式的
    替换数组 //生成新的数组 需要重新赋值
    （用索引的方法修改数据不是响应式的）
    修改响应式数据
        Vue.set(vm.items,indexOfItem,newValue)
        vm.$set(vm.items,indexOfItem,newValue)
            1.参数一表示要处理的数组名称
            2.参数二表示要处理的数据的索引
            3.参数三表示要处理的数组的值

常用特性应用场景
    过滤器（格式化日期）
    自定义指令（获取表单焦点）
    计算属性（统计图书数量）
    倾听器（验证图书存在性）
    生命周期（图书数据处理 ）


钩子函数：
钩子（Hook）概念源于Windows的消息处理机制，通过设置钩子，应用程序对所有消息事件进行拦截，然后执行钩子函数。


在事件定义时，写方法时省略了小括号，但是方法本身是需要一个参数的，这个时候,
Vue会默认将浏览器生产的event事件对象作为参数传入到方法-->
方法定义时，我们需要event对象， 同时又需要其他参数
如何手动的获取到浏览器参数的event对象: $event



//编程范式:命令式编程/声明式编程
//编程范式:面向对象编程(第公民:对象)/函数式编程(第 一公民:函数)
// filter/map/ reduce
// filter中的回调函数有一个要求:必须返回一个boolean值
// true: 当返回true时， 函数内部会自动将这次回调的n加入到新的数组中
//false:当返回false时，函数内部会过滤掉这次的n
高阶函数
    const nums = [ 10, 20，111, 222, 444，40，50 ]
    //1.filter 函数的使用
    let newNums = nums. filter(function (n) {
    return n < 100
    })
    console . log(newNums); //[10,20,40,50]

    // 2. map函数的使用
    // 20，40，80，100
    let new2Nums = newNums . map( function (n) {
    return n * 2|
    })
    console. log( new2Nums) ;

    // 3.reduce函数的使用
    // reduce作用对数组中所有的内容进行汇总
    let total = new2Nums . reduce( function (preValue, n) {
    return preValue + n
    0)
    console . log(total);
    //第一次: prevalue 0 n 20
    //第二次: prevalue 20 n 40
    //第二次: prevalue 60 n 80
    //第二次: preValue 140 n 100
    //240

    //函数式编程
    const nums =[ 10, 20， 111, 222, 444， 40， 50 ]
    let total = nums . filter(function (n) {
    return n < 100
    }) . map(function (n) {
    return n*2
    }). reduce(function (prevValue, n) {
    return prevValue + n
    },0)

    let total = nums.filter(n => n < 100).map(n => n * 2).reduce((pre, n) => pre + n);
    console. log(total);




