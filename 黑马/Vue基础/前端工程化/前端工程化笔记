模块化的相关规范
使用webpack
使用Vue单文件组价
使用Vue脚手架
使用Element-UI

传统开发模式的主要问题
    1.命名冲突
    2.文件依赖
通过模块化解决上述问题
    模块化就是把单独的一个功能封装到一个模块（文件）中，模块之间相互隔离，但是可以通过
    特定的接口公开内部成员，也可以依赖别的模块
    好处：方便代码重用，从而提高开发效率，并且方便后期的维护
浏览器端模块化规范
    1.AMD
    Require.js
    2.CMD
    Sea.js
服务器端模块化规范
    CommonJS
    1.模块分为单文件模块与包
    2.模块成员导出module.exports和exports
    3.模块成员导入：require（'模块标识符'）
大一统的模块化规范-ES6模块化
    在语义层面是哪个定义了ES6模块化规范，是浏览器与服务器端通用的模块化开发规范
    ES6模块化规范中定义：
    每个js文件都是一个独立的模块
    导入模块成员使用import关键字
    暴露模块成员使用export关键字
    1.Node.js中通过babel体验ES6模块化
        1.npm install --save-dev @babel/core @babel/cli @babel/preset-env @babel/node
        2.npm install --save @babel/polyfill
        3.项目根目录创建文件 babel.config.js
        4.babel.config.js 文件内容如右侧代码
        5.通过npx babel-node index.is执行代码
ES6模块化的基本语法
    1.默认导出与默认导入
        默认导出语法 export default 默认导出的成员
        默认导入语法 import 接收名称 from '模块标识符'
        ========================
        //当前文件模块为m1.js
        //定义私有成员a和c
        let a=10
        let c=20
        //外界访问不到变量d，因为它没有被暴露出去
        let d=30
        function show(){}
        //将本模块中的私有变量成员暴露出去，供其他模块使用
        export default{
            a,c,show
        }
        =====================
        //导入模块成员
        import m1 from './m1.js'
        console.log(m1)
        //打印输出的结果为：
        //{a:10,c:20,show: [Function: show]}
        ·注意：每个模块中只允许使用一次 export default，否则会报错
    2.按需导出和按需导入
        按需导出语法 export let s1=10
        按需导入语法 import {s1} from '模块标识符'
        ==========================
        //当前模块为 m1.js
        //向外按需导出变量s1
        export let s1='aaa'
        //向外按需导出变量s2
        export let s2='ccc'
        //向外按需导出方法 say
        export function say=function(){}
        =============================
        //导入模块成员
        import {s1,s2as ss2,say} from './m1.js'
        console.log(s1) //打印输出aaa
        console.log(ss2) //打印输出ccc
        console.log(say) //打印输出[Function:say]
        ·在每个模块中可以使用多个按需导出
    3.直接导入并执行模块代码
        有时候，我们只想单纯执行某个模块中的代码，并不需要的到模块中向外暴露的成员，此时可以直接导入并执行模块代码
        =====================
        当前文件模块为m2.js
        //在当前模块中执行一个for循环操作
        for(let i=0;i<3;i++){
            console.log(i)
        }
        =======================
        //直接导入并执行模块代码
        import './m2.js'

web开发面临的困境
    文件依赖关系错综复杂、静态资源请求效率低、模块化支持不友好、浏览器对高级JavaScript特性兼容程度较低
webpack概述
    webpack是一个流行的前端项目构建工具（打包工具），可以解决当前web开发所面临的困境
    webpack提供了友好的模块化支持，以及代码压缩混淆、处理js兼容问题、性能优化等强大的功能
webpack的基本使用
   1. 创建列表隔行变色项目
        1.新建项目空白目录，并运行npm init -y 命令，初始化包管理配置文件 package.json
        2.新建src源代码目录
        3.新建src->index.html 首页
        4.初始化首页基本的结构
        5.运行npm install jquery -S命令 安装jQuery
        6.通过模块化的形式，实现列表隔行变色效果(发现存在兼容问题要使用webpack)
   2. 在项目中安装和配置webpack
        1.运行 npm install webpack webpack-cli -D命令，安装webpack相关的包
        2.在项目目录中，创建名为 webpack.config.js 的webpack配置文件
        3.在webpack的配置文件中，初始化如下基本配置：
            module.exports={
                mode:'development' //mode用来指定构建模式  development 转换出来的代码不会进行压缩与混淆
            }
        4.在package.json 配置文件中中的scripts节点下，新增dev脚本如下：
            "scripts":{
                "dev":"webpack" //script节点下的脚本，可以通过npm run 执行
            }
        5.在终端运行 npm run dev 命令，启动webpack进行项目打包
   3.配置打包的入口和出口
        webpack的4.0版本中默认约定：
        打包的入口文件为：src ->index.js
        打包的输出文件为：dist ->main.js
        如果要修改打包的入口与出口，可以再webpack.config.js中新增如下配置信息
        const path=require('path') //导入node.js中专门操作路径的模块
        module.exports={
            entry:path.join(_dirname,'./src/index.js'),//打包入口文件的路径
            output:{
                path:path.join(_dirname,'./dist'),//输出文件的存放路径
                filename:'bundle.js'//输出文件的名称
            }
        }
   4.配置webpack的自动打包功能
        1.运行npm install webpack-dev-server -D命令，安装支持项目自动打包的工具
        2.修改package.json ->script中的dev命令
         "scripts":{
                        "dev":"webpack-dev-server" //script节点下的脚本，可以通过npm run 执行
                    }
        3.将src->index.html中，script脚本的引用路径，修改为"/buldle.js"
        4.使用npm run dev 命令，重新打包
        5.在浏览器中访问http://localhost:8080地址，查看自动打包效果
        注意：webpack-dev-server 会启动一个实时打包的http服务器
              webpack-dev-server 打包生成的输出文件，默认放到了项目根目录中，而且是虚拟的、看不见的

   5.配置html-webpack-plugin生成预览页面（把src路径里面的首页复制一份放到网站根目录里）
        1.运行npm install html-webpack-plugin -D命令，安装生成预览页面的插件
        2.修改webpack.config.js文件头部区域，添加如下配置：
        //导入生成预览页面的插件，得到一个构造函数
        const HtmlWebpackPlugin=require('html-webpack-plugin')
        const htmlPlugin=new HtmlWebpackPlugin({ //创建插件的实例对象
            template:'./src/index.html',//指定要用到的模板文件
            filename:'index.html'//指定生成的文件的名称，该文件存在于内存中，目录中不显示
        })
        3.修改webpack.config.js文件中向外暴露的配置对象，新增如下配置节点：
            module.exports={
                plugins:[htmlPlugin] //plugins数组是webpack打包期间会用到的一些插件列表
            }
   6.配置自动打包相关的参数
        //package.json中的配置
        //--open 打包完成后自动打开浏览器页面
        //--host 配置IP地址
        //port 配置端口
        "scripts":{
              "dev":"webpack-dev-server --open --host 127.0.0.1 --port 8888"
        }

webpack中的加载器
    1.通过loader打包非js模块
        在实际开发过程中，webpack默认只能打包处理以.js后缀结尾的模块，其他非.js后缀名
        结尾的模块，webpack默认处理不了，需要调用loader加载器才可以正常打包，否则会报错！

        loader加载器可以协助webpack打包处理特定的文件模块，比如：
            less-loader 可以打包处理.less相关的文件
            sass-loader可以打包处理，.scss相关的文件
            url-loader可以打包处理css中与url路径相关的文件

webpack中加载器的基本使用
    1.打包处理css文件
        1.运行 npm i style-loader css-loader -D命令，安装css文件的loader
        2.在webpack.config.js的module->rules数组中，添加loader规则如下：
            //所有第三方文件模块的匹配规则
            modules:{
                rules:[
                //使用多个loader时，是从右向左解析
                    {test:/\.css$/,use:['style-loader','css-loader']}
                ]
            }
            其中：test表示匹配的文件类型，use表示对应要调用的loader
            注意：use数组中指定的loader顺序是固定的
                  多个loader的调用顺序是：从后往前调用
    2.打包处理less文件
         1.运行 npm i less-loader less -D命令，
         2.在webpack.config.js的module->rules数组中，添加loader规则如下：
            //所有第三方文件模块的匹配规则
            modules:{
                rules:[
                    {test:/\.less$/,use:['style-loader','css-loader','less-loader']}
                ]
            }
    3.打包处理scss文件
         1.运行 npm i sass-loader node-sass -D命令，
         2.在webpack.config.js的module->rules数组中，添加loader规则如下：
             //所有第三方文件模块的匹配规则
             modules:{
                 rules:[
                     {test:/\.scss$/,use:['style-loader','css-loader','sass-loader']}
                 ]
             }
    4.配置postCSS自动添加css的兼容前缀
         1.运行npm i postcss-loader autoprefixer -D命令
         2.在项目根目录中创建postcss的配置文件 protcss.config.js并初始化如下配置
            const autoprefixer=require('autoprefixer') //导入自动添加前缀的插件
            module.exports={
                plugins:[autoprefixer] //挂载插件
            }
         3.在webpack.config.js的module->rules数组中，修改css的loader规则如下
            modules:{
                rules:[
                    {test:/\.css$/,use:['style-loader','css-loader','postcss-loader']}
                ]
            }
    5.打包样式表中的图片和字体文件
          1.运行npm i url-loader file-loader -D命令(file-loader 是 url-loader的内置依赖项)
          2.在webpack.config.js的module->rules数组中，添加loader规则如下：
            module:{
                rules:[
                    {test:/\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$/,
                     use:'url-loader?limit=16940'
                    }
                ]
            }
            其中？之后的是loader的参数项
            limit用来指定图片的大小，单位是字节（byte），只有小于limit大小的图片，才会被转为base64图片
            当加载的图片，大于limit时，需要使用file-loader模块进行加载
    6.处理打包js文件中的高级语法
          1.安装babel转换器相关的包，npm i babel-loader @babel/core @babel/runtime -D
          2.安装babel语法插件相关的包：npm i @babel/preset-env @babel/plugin-transform-runtime
          @babel/plugin-proposal-class-properties -D
          3.在项目根目录中，创建babel配置文件babel.config.jsbiang初始化基本配置如下
            module.exports={
                presets:['@babel/preset-env'],
                plugins:['@babel/plugin-transform-runtime','@babel/plugin-proposal-class-properties']
            }
          4.在webpack.config.js的module->rules数组中，添加loader规则如下：
              module:{
                  rules:[
                       //exclude为排除项，表示'babel-loader'不需要处理node_modules中的js文件
                      {test:/\.js$/,
                       use:'babel-loader',
                       exclude:/node_modules/
                      }
                  ]
              }

Vue单文件组件
    传统组件的问题和解决方案
        1.问题
            1.全局定义的组件必须保证组件的名称不重要
            2.字符串模板缺乏语法高亮，在HTML有多行的时候，需要用到丑陋的\
            3.不支持css意味着当HTML和JavaScript组件化时，css明显被遗漏
            4.没有构建步骤限制，只能使用HTML和ES5JavaScript，而不能使用预处理器（如：Bebel）
        2.解决方案
            针对传统组件的问题，Vue提供了一个解决方案--使用Vue单文本组件
    Vue单文件组件的基本用法
        单文件组件的组成结构
            template 组件的模板区域
            script   业务逻辑区域
            style    样式区域 <style scoped></style>   //scoped 防止样式之间的冲突问题，每个组件的样式都是私有的 不会影响到其他的组件
    webpack中配置vue组件的加载器
        1.运行npm i vue-loader vue-template-compiler -D命令
        2.在webpack.config.js配置文件中，添加vue-loader的配置如下：
          const VueLoaderPlugin=require('vue-loader/lib/plugin')
          module:{
            rules:[
                //...其他规则
                {test:/\.vue$/,loader:'vue-loader'}
            ]
          },
          plugins:[
                //...其他插件
                new VueLoaderPlugin()//请确保引入这个插件
          ]
    在webpack项目中使用vue
        1.运行npm i vue -S安装vue
        2.在src->index.js入口文件中，通过import Vue from 'vue' 来导入vue构造函数
        3.创建vue的实例对象，并指定要控制的el区域
        4.通过render函数渲染App根组件(先导入组件)
        =======================
        //1.导入Vue构造函数
        import Vue from 'vue'
        //2.导入App根组件
        import App from './components/App.vue'

        const vm=new Vue({
            //3.指定vm实例要控制的el区域
            el:'#app',
            //4.通过render函数，把指定的组件渲染到el区域
            render:h=>h(app)
        })
        ============================
    webpack打包发布
        上线之前需要通过webpack将应用进行整体打包，可以通过package.json文件配置打包命令
        ============================
        //在package.json文件中配置webpack打包命令
        //该命令默认加载项目根目录中的webpack.config.js配置文件
        "scripts":{
            //用于打包的命令
            "build":"webpack -p",
            //用于开发调试的命令
            "dev":"webpack-dev-server --open --host 127.0.0.1 --port 3000"
        }
        ============================

Vue脚手架的基本用法
    vue-cli 可以快速搭建Vue环境以及对应的webpack配置
    Vue 脚手架用于快速生成 Vue 项目基础架构
    //1.基于交互式命令行的方式，创建新版vue 项目
    vue create my-project
    //2.基于图形化界面的方式，创建新版vue项目
    vue ui
    //3.基于2.x的旧模板，创建旧版vue项目
    npm install -g @vue/cli-init
    vue init webpack my-project
Vue 脚手架生成的项目结构分析
    .git
    node_modules------------------依赖包目录
    public------------------------静态资源目录
    src---------------------------组件源码目录
    .gitignore
    babel.config.js---------------Babel配置文件
    package.json
    package-lock.json
    README.md
Vue脚手架的自定义配置
    1.通过package.json配置项目
    //必须是符合package.json语法
    "vue":{
        "devServer":{
            "port":"8888",
            "open":true
        }
    }
    不推荐使用这种配置方式，因为package.json 主要用来管理包的配置信息；为了方便维护
    推荐奖vue脚手架相关的配置，单独定义到vue.config.js配置文件中
    2.通过单独的配置文件配置项目
        1.在项目的根目录创建文件vue.config.js
        2.在文件中进行相关配置，从而覆盖默认配置
        //vue.config.js
        module.exports={
            devServer:{
                port:8888
                open:true
            }
        }

Element-UI:一套为开发者、设计师和产品经理准备的基于Vue2.0的桌面端组件库
    1.基于命令行方式手动安装
        1.安装依赖包 npm i element-ui -S
        2.导入element-UI 相关资源


        //在main.js中导入组件库
        import ElementUI from 'element-ui';
        //导入组件相关样式
        import 'element-ui/lib/theme-chalk/index.css';
        //配置Vue插件 通过Vue.use将element将
        Vue.use(ElementUI);
    2.基于图形化界面自动跳转
        1.运行vue ui 命令，打开图形化界面
        2.通过Vue项目管理器，进入具体的项目配置面板
        3.点击插件--> 添加插件，进入插件查询面板
        4.搜索vue-cli-plugin-element 并安装
        5.配置插件，实现按需导入，从而减少打包后项目的体积
