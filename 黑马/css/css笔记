css属性书写顺序：
1.布局定位属性：display/position/float/clear/visibility/overflow (建议display第一个写，毕竟关系到模式)
2.自身属性：width/height/margin/padding/border/background
3.文本属性: color/font/text-decoration/text-align/vertical-align/white-space/break-word
4.其他属性(css3): content/cursor/border-radius/box-shadow/text-shadow/background:linear-gradient

会继承的样式：font-  line-  text-  color-



H5新增语义化标签
<header>头部
<nav>导航
<article>内容
<section>块级
<aside>侧边栏
<footer>尾部
多媒体标签
音频标签<audio>

H5新增input表单，表单属性

CSS3新增的属性，结构伪类和伪元素选择器
类选择器，属性选择器，伪类选择器，权重为10
属性选择器  button[disabled]  div[class^=""]
伪类选择器  ul li:first-child {}
            ul li:last-child {}
            ul li:nth-child(n) {}(n可以是数字关键词，公式)
            //of-type选择指定类型的元素
            div span:first-of-type{}
            div span:first-of-type{}
            div span:first-of-type(2){}
伪元素选择器
::before 在元素内部的前面插入内容
::after  在元素内部的后面插入内容
before和after必须有content属性
before在内容的前面，after在内容的后面
before和 after创建一个元素，但是属于行内元素
因为在dom里面看不见刚才创建的元素，所以我们成为伪元素
伪元素和标签选择器一样，权重为1


这些是CSS3特有的选择器，E > F 表示选择E元素的所有子F元素，与E F的区别在于，E F选择所有后代元素，>只选择一代。bai 没有<的用法。

E+F表示HTML中紧随E的F元素。

nth-child是个伪类的用法，如dup:nth-child(2)就表示在p的父元素中选择位居第二位的p，这个可能不太好理解。

transition 过渡写到本身上，谁做动画谁给加
移动translate：定义2D转换中的移动，沿着X和Y的轴移动元素
           translate最大的优点：不会影响到其他元素的位置
           translate中的百分比单位是相对于自身元素的translate:(50%,50%)
           对行内标签没有效果
旋转rotate：rotate里面跟度数，单位deg比如rotate(45deg)
            角度为正ship，顺时针，负时，为逆时针
            默认旋转的中心点是元素的中心点
转换中心点：transform-origin：x y;
            注意后面的参数x和y用空格隔开
            x y默认转换的中心点是元素的中心点(50% 50%)
            还可以给x y设置像素或者方位名词（top，bottom，left，right，center）
缩放scale：不会影响其他的盒子  而且可以设置缩放的中心点

2D转换综合写法：
同时使用多个转换，其格式为：transform: translate() rotate() scale()
其顺序会影响转换的效果（先旋转会改变坐标轴方向）
当我们同时有位移和其他属性的时候，记得要事先将 位移放到最前

动画animation
1.先定义动画（类似定义类选择器）
    @keyframes 动画名称 {
        0%{}
        100%{}
    }
    百分数为动画序列
2.元素使用动画
animation-name:动画名称
animation-duration:持续时间
动画简写
animation:动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 动画起始或者结束的状态
animation:myfirst 5s linear  2s infinite alternate

3D移动简写
transform:translate3d(x,y,z)
透视perspective
透视写在被观察元素的父盒子上面的（单位是像素）
transform:rotate3d(x,y,z,deg) xyz表示旋转轴的矢量
transform:rotate3d(1,0,0,45deg)//沿x轴旋转45

3D呈现transform-style
    控制子元素是否开启三维立体环境
    transform-style:float子元素不开启3d立体空间，默认的
    transform-style:preserve-3d;子元素开启立体空间
    代码写给父级，但是影响的是子盒子

浏览器私有前缀
    -moz-:代表firefox浏览器私有属性
    -ms-:代表ie浏览器私有属性
    -webkit-:代表safari、chrome私有属性
    -o-:代表Opera私有属性
提倡的写法
    -moz-border-radius:10px;
    -webkit-border-radius:10px;
    -o-border-radius:10px;
    border-radius:10px;

总结:css3新增加的属性，结构伪类，伪元素选择器，
     css2D移动 旋转 缩放
     css3动画设置
     css3 3D移动 旋转 缩放

display:none;不占位隐藏
visibility:hidden;占位隐藏
cursor:move  游标变成十字




为什么要清除浮动？
清除浮动主要是为了解决，父元素因为子级元素浮动引起的内部高度为0的问题
1.如下，我给父盒子设置一个boder，内部放两个盒子一个big 一个small，未给big和small设置浮动，则他们会默认撑开父盒子
2.当我给内部两个盒子加上float属性的时候
顶部深蓝色盒子就会顶上来，然后父盒子因为没设置高度，变成一条线，big和small已经浮动了
总结一下：
当父元素不给高度的时候，
内部元素不浮动时会撑开
而浮动的时候，父元素变成一条线

清除浮动的方法（最常用的4种）
1.额外标签法（在最后一个浮动标签后，新加一个标签，给其设置clear：both；）（不推荐）
    如果我们清除了浮动，父元素自动检测子盒子最高的高度，然后与其同高。
    优点：通俗易懂，方便
    缺点：添加无意义标签，语义化差
    不建议使用。
2.父级添加overflow属性（父元素添加overflow:hidden）（不推荐）
    通过触发BFC方式，实现清除浮动
    优点：代码简洁
    缺点：内容增多的时候容易造成不会自动换行导致内容被隐藏掉，无法显示要溢出的元素
    不推荐使用
3.使用after伪元素清除浮动（推荐使用）
     .clearfix:after{/*伪元素是行内元素 正常浏览器清除浮动方法*/
            content: "";
            display: block;
            height: 0;
            clear:both;
            visibility: hidden;
        }
        .clearfix{
            *zoom: 1;/*ie6清除浮动的方式 *号只有IE6-IE7执行，其他浏览器不执行*/
        }

    <body>
        <div class="fahter clearfix">
            <div class="big">big</div>
            <div class="small">small</div>
            <!--<div class="clear">额外标签法</div>-->
        </div>
        <div class="footer"></div>
    </body>
  优点：符合闭合浮动思想，结构语义化正确
  缺点：ie6-7不支持伪元素：after，使用zoom:1触发hasLayout.
  推荐使用
4.使用before和after双伪元素清除浮动
         .clearfix:after,.clearfix:before{
            content: "";
            display: table;
        }
        .clearfix:after{
            clear: both;
        }
        .clearfix{
            *zoom: 1;
        }

     <div class="fahter clearfix">
            <div class="big">big</div>
            <div class="small">small</div>
     </div>
     <div class="footer"></div>
优点：代码更简洁
缺点：用zoom:1触发hasLayout.
推荐使用
