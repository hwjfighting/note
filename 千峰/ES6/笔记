let的使用
用来声明变量。它的用法类似于var，但所申明的 的变量，只有let命令所在的代码块内有效
存在块级作用域{}
不存在变量提升
暂时性死区
    var num=20;
    if(true){
        console.log(num);
        let num=30;
    }//结果会报错  一旦在块级作用域中使用let关键字声明这个变量 这个变量就会和这个块级作用域整体进行绑定
    //在当前区域当中使用num和外部的num是没有关系的
不允许重复声明（包括普通变量和函数参数）
const的使用
用来声明常量，不要试图改变常量的值，常量就是值（内存地址不能变化的量）声明常量时必须赋值其他语法参照let
具有块级作用域   声明常量时必须赋值
常量声明后值不可更改：1.基本数据类型不可更改 2.复杂数据类型，数据结构内部的值可以更改，数据值本身不可更改
let、const、var的区别
1.使用var声明的变量，其作用域为该语句所在的函数内，且存在变量提升。
2.使用let声明的变量，其作用域为该语句所在的代码块内,不存在变量提升。
3.使用const声明的是常量，在后面出现的代码中不能修改该常量的值。


解构赋值：ES6中允许从数组中提取值，按照对应位置、对变量赋值，对象也可以实现结构
数组：
let[a,b,c]=[1,2,3];
默认赋值
[a,b=2]=[3];
let c;
[a=3]=[c];
对象：对象解构允许我们使用变量的名字匹配对象的属性 匹配成功
将对象属性的值赋值给变量
let{a,b}={a:" aaa",b:" bbb"};
let {a:b}={a:" aaa"};
let{a,b=5}={a:1};

箭头函数 ()=>{}  ES6中新增的定义函数的方式
const fn()=>{
    console.log(123)
}
fn();
函数体中只有一句代码，且代码的执行结果就是返回值，可以省略大括号
如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return关键字返回
凡是用大括号括起来的部分如果想拿到返回值就必须用return关键字返回，否则返回undefined。
在箭头函数中 如果形参只有一个 形参外侧的小括号 也是可以省略的
箭头函数不绑定this关键字，箭头函数没有自己的this关键字 指向的是函数定义位置的上下文this
如果在箭头函数中使用this
this关键字将指向箭头函数定义位置中的this
var age=100;
var obj={
    age:20,
    say:()=>{
        alert(this.age);
    }
}
obj.say();// 100
对象是不能产生作用域的  say方法中的this指向的是window
1.只含有1个表达式
2.含有多条语句
3.this的指向问题   箭头函数的this引用的就是最近作用域中的this  向外层作用域中一层一层的查找this，直到有this的定义
//加括号的函数体返回对象字面表达式：
参数=> ({foo: bar})

记住：在ES6中用params => {object:literal}这种简单的语法返回对象字面量是行不通的。
需要用圆括号把对象字面量包起来
var func = () => ({foo: 1})

注意：箭头函数在参数和箭头之间不能换行。

剩余参数
剩余参数语法允许我们将一个不定数量的参数表示为一个数组
function sum(first,...args){
    console.log(first);//10
    console.log(args);//[20,30]
}
sum(10,20,30);

const sum=(...args)=>{
    let total=0;
    args.foreach(item=>total+=item);
    return total;
};
console.log(sum(10,20));//结果：30
console.log(sum(10,20,30));//结果：60

剩余参数和解构配合使用
let students=['wangwu','zhangsna','lisi'];
let[s1,...s2]=students;
console.log(s1);//结果：'wangwu'
console.log(s2);//结果：['zhangsan','lisi']

扩展运算符（Array的扩展方法）
1.扩展运算符可以将数组或者对象转化为用逗号分隔的参数序列。
let ary=[1,2,3];
...ary  //1,2,3
console.log(...ary) //1 2 3
console.log(1,2,3) //1,2,3
2.扩展运算符可以应用于合并数组
//方法1
let ary1=[1,2,3];
let ary2=[4,5,6];
let ary3=[...ary1,...ary2];// ary1.push(...ary2)
//方法二
ary1.push(...ary2);
3.扩展运算符能将类数组或可遍历对象转换为真正的数组( 伪数组是一个Object，数组是Array。)
将伪数组转换为真正的数组(可以调用数组下的方法)
let oDivs=document.getElementsByTagName('div');
oDivs=[...oDivs];
4.构造函数方法：Array.form();
将类数组或可遍历数组转换为真正的数组
let arrayLike={
    '0':'a',
    '1':'b',
    '2';'c',
    length:3
};
let arr2=Array.from(arrayLike);//['a','b','c']
方法还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组
let newAry=Array.from(aryLike,item=>item*2)
5.实例方法find()用于找出第一个符合条件的数组成员，如果没有找到返回undefined
let ary=[{
    id;1,
    name:'张三'
},{
    id:2,
    name:'李四'
}];
let target=ary.find((item,index)=>item.id==2);
6.实例方法：findIndex()
用于找出第一个符合条件的数组成员的位置，如果没有找到返回-1
let ary=[1,5,10,15];
let index=ary.findIndex((value,index)=>value>9);
console.log(index);//2
7.实例方法：includes()
表示某个数组是否包含给定的值，返回布尔值。
[1,2,3].include(2);//true
[1,2,3].include(4);//false

String的扩展方法
模板字符串
1.ES6新增的创建字符串的方式，使用反引号定义。
let name=`zhangsan`;
2.模板字符串可以解析变量。
let name='张三';
let sayHello=`hello,my name is ${name}`;//hello, my name is 张三
3.模板字符串可以换行
4.在模板字符串中可以调用函数
const sayHello=function(){
    return 'hhhhhhh';
};
let greet=`$(sayHello()) lll`;
console.log(greet);//hhhhhhh lll
5.实例方法：startWith()和endsWith()
startWith(): 表示参数字符串是否在原字符串的头部，返回布尔值
endsWith():表示参数字符串是否在原字符串的尾部，返回布尔值
let str='Hello world!';
str.startsWith('Hello')//true
str.endsWith('!');//true
6.repeat()方法表示原字符重复n次，返回一个新的字符串
'x'.repeat(3);//"xxx"
'hello'.repeat(2);//"hellohello"

set结构
ES6提供新的数据结构Set。它类似于数组，但是成员的值都是唯一的，没有重复的值
Set 结构没有键名，只有键值（或者说键名和键值是同一个值）.
Set本身 是一个构造函数，用来生成set 数据结构
const s=new Set();
Set函数可以接受一个数组作为参数，用来初始化
const set=new Set([1,2,3,4]);
console.log(set.size);//4
const s=new Set([1,2,1,2]);
console.log(s.size);//2
const ary=[...s];
console.log(ary);
实例方法
add(value):添加某个值，返回Set结构本身
delete(value):删除某个值，返回一个布尔值，表示删除是否成功
has(value):返回一个布尔值，表示该值是否为Set的成员
clear():清除所有成员，没有返回值
遍历
Set结构的实例与数组一样，也拥有forEach方法，用于对每个成员执行某种操作，没有返回值
s.forEach(value=>console.log(value))

let set=new Set([1,2,3,4,4]);//构造函数，值不重复
[...set]//...扩展运算符，将类数组对象转化以逗号分割的序列
for of//遍历(of 遍历数组；in 遍历对象)
set size//长度 set.add(0)  set.delete(0)  set.has(0)  set.clear(0;)
keys();返回键名的遍历器for(let item of set.keys()){console.log(item);}
values():返回键值的遍历器
entries():返回键值对的遍历器
forEach();使用回调函数遍历每个成员set.forEach((value,key)=>console.log(value*2))

map结构
let map=new Map([["name",john],["age",30]]);
map.set(1,1);
map.size//长度
map.set(key,value);map.get(key);map.delete(key);map.has(key);map.clear();
keys():返回键名的遍历器
values():返回键值的遍历器
entries():返回键值对的遍历器 for(let [key,value] of map.entries()){console.log(key,value);}
forEach();使用回调函数遍历每个成员map.forEach((key,value)=>console.log(value*2))

生成器函数（generator）
yield是ES6的新关键字，使生成器函数执行暂停，yield关键字后面的表达式的值返回给生成器的调用者。它可以被认为是一个基于生成器的版本的return关键字。
yield关键字实际返回一个IteratorResult（迭代器）对象，它有两个属性，value和done，分别代表返回值和是否完成。
yield无法单独工作，需要配合generator(生成器)的其他函数，如next，懒汉式操作，展现强大的主动控制特性。

需要next()函数配合使用，每次调用返回两个值：分别是value和done，代表迭代结果和是否完成
函数next()是个迭代器对象，传参可以缺省，默认调用函数。

function* foo(x){
    yield x+1;
    yield x+2;
    yield x+3;
}
var f=foo(1);
f.next;

function*foo(x){
    var y=2*(yield(x+1));
    var z=yield(y/3);
    return(x+y+z);
}
var it=foo(5);
console.log(it.next(3));
console.log(it.next(12));
console.log(it.next(13));
利用生成器函数编写斐波拉契数列
（0 1 1 2 3 5 8 13 21 34...）

类（class）
class Person{
    constructor(name){
        this.name=name;
    }
    sayHello(){
        console.log(this.name);
    }
}


对象字面量的增强写法
    const name='why';
    const age=18;
    const height=1.6;
    //ES5的写法
    const obj={
        name:name,
        age:age,
        height:height
    };
    //ES6的写法
    const obj2={
        name,
        age,
        height
    };
    console.log(obj2);

函数的增强写法
    //ES5的写法
    const obj={
       run:function(){
       },
       eat:function(){
       }
    }
    //ES6的写法
    const obj2={
        run(){
        },
        eat(){
        }
    }
