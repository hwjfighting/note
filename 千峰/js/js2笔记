类
    class Star{
        construct(uname){
            this.uname=uname;
        }
        sing(){}
    }
    var ldh=new Star('ldh');
    类里面有个 constructor 函数，只要new生成实例，就会自动调用这个函数，如果不写，类也会自动生成这个函数
继承 extends
    可以访问和调用对象父类上的函数，可以调用父类的构造函数，也可以调用父类的普通函数
    子类在构造函数中使用super，必须放到this前面（必须先调用父类的构造方法，再使用子类构造方法）
    ES6中类没有变量提升

添加功能
    以前的做法：动态创建元素createElement，但是元素里面内容较多，需要innerHTML
    赋值在appendChild追加到父元素里
    现在高级做法：利用insertAdjacentHTML() 可以直接把字符串格式元素添加到父元素中
    element.insertAdjacentHTML(position,text);
    position是相对于元素的位置，并且必须是以下字符串之一：
    beforebegin 元素自身的前面
    afterbegin  插入元素内部的第一个子节点之前
    beforeened  插入元素内部的最后一个子节点之后
    afterend    元素自身的后面


构造函数和原型
    创建对象的方式：1.对象字面量 var obj2={};
                   2.new Object()
                   3.自定义构造函数   function Star(uname,age){
                                          this.name=uname;
                                          this.age=age;

                                     }
                                     var ldh=new Star('ldh',18)
    new在执行时会做四件事：
        1.在内存中创建一个新的空对象
        2.让this指向这个新的对象
        3.执行函数里面的代码，给这个新对象添加属性和方法
        4.返回这个新对象（所以构造函数里面不需要return）
    1.实例成员就是构造函数内部通过this添加的成员 uname age 就是实例成员
      实例成员只能通过实例化的对象来访问 不可以通过构造函数来访问实例成员
    2.静态成员 在构造函数本身上添加的成员 sex就是静态成员
      Star.sex='男'

构造函数的问题
    存在浪费内存的问题
构造函数原型prototype
    构造函数通过原型分配的函数是所有对象所共享的
    js规定，每个构造函数都有一个prototype属性，指向另一个对象，注意这个prototype就是一个对象，
    这个对象的所有属性和方法，都会被构造函数所拥有。
    我们可以把哪些不变的方法，直接定义在prototype对象上，这样所有对象的实例就可以共享这些方法
 原型：是对象 ，原型的作用：是共享方法
一般情况下，我们的公共属性定义到构造函数里面，公共的方法我们放到原型对象身上
对象原型_proto_
    对象都会有一个属性_proto_指向构造函数的prototype原型对象，之所以我们对象
    可以使用构造函数prototype原型对象的属性和方法，就是因为对象有_proto_原型的存在
    ·_proto_对象原型和原型对象prototype是等价的
    ·_proto_对象原型的意义就在于为对象的查找机制提供一个方向，或者说一条路线，但是它是一个非标准属性，
    因此在实际开发中，不可以使用这个属性，它只是内部指向原型对象prototype
    原型对象中的this指向的是实例对象
扩展内置对象
    可以通过原型对象，对原来的内置对象进行扩展自定义的方法，比如给数组增加
    自定义求偶数和的功能
     注意：数组和字符串内置对象不能给原型对象覆盖操作Array.prototype={},
     只能是Array.prototype.xxx=function(){}的方式
继承
    ES6之前并没有给我们提供extends继承，我们可以通过 构造函数+原型对象 模拟实现继承，
    被称为组合继承
    call() 调用这个函数，并且修改函数运行时的this指向


函数的多种定义和调用方式
改变函数内部this的指向
严格模式的特点
把函数作为参数返回值传递（高阶函数）
闭包的作用
递归的两个条件
深拷贝和浅拷贝的区别

函数的定义方式
    1.函数声明function关键字（命名函数） function fn(){}
    2.函数表达式（匿名函数）var fun=function(){}
    3.new Function('参数1','参数2','函数体')  参数必须都是字符串格式
    执行效率低，不方便书写，较少使用，所有函数都是Function的实例（对象）
    函数也属于对象
函数的调用方式
this的指向问题
    1.普通函数中的this指向window
    2.对象的方法 this指向的是对象o
    3.构造函数this指向ldh这个实例对象，原型对象里面的this指向的也是ldh这个实例对象
    4.绑定事件函数this指向的是调用者
    5.定时器函数中的 this指向的是window
    6.立即执行函数中的this指向的window
改变函数内部this指向
    js为我们专门提供了一些函数方法来帮我们更优雅的处理函数内部this的指向问题，
    常用的有bind(),call(),apply()三种方法
    call() :1.调用函数 2.改变函数的this指向
        fun.call(thisArg,arg1,arg2,...)
    apply():1.调用函数 2.改变函数的this指向
        fun.apply(thisArg,[argArray])
        thisArg:在fun函数运行时指定的this值
        argArray：传递的值，必须包含在数组里面
        返回值就是函数的返回值，因为它就是调用函数
    bind(): 不会调用函数，但是能改变函数内部this指向
        fun.bind(thisArg,arg1,arg2,...)
        thisArg:在fun函数运行时指定this值
        arg1，arg2：传递的其他参数
        返回指定的this值和初始化参数改造的原函数拷贝
    应用场景
        1.call经常做继承
        2.apply经常跟数组有关系，比如借助数学对象实现数组的最大值和最小值
        3.bind不调用函数，但是还想改变this指向，比如改变定时器内部的this指向

严格模式 'use strict'
    1.变量规定
        1.在正常模式下，如果一个变量没有声明就赋值，默认是全局变量，严格模式禁止
        这种用法，变量都必须先用var命令声明，然后再使用。
        2.严禁删除已经声明变量，例如，delete x；语法是错误的。
    2.严格模式下this指向问题
        1.以前在全局作用域函数中this指向window对象
        2.严格模式下全局作用域中函数中的this是undefined
        3.以前构造函数时不加new也可以调用，当普通函数，this指向全局对象
        4.严格模式下，如果构造函数不加new调用，this会报错
        5.new实例化的构造函数指向创建的对象实例
        6.定时器this还是指向window
        7.事件、对象还是指向调用者
    3.函数变化
        1.函数不能有重名的参数
        2.函数必须声明在顶层新版本的JavaScript会引入“块级作用域”（ES6中已引入）
        为了与新版本接轨，不允许在非函数的代码块内声明函数（比如if内和for内）

高阶函数是对其他函数进行操作的函数，它接收函数作为参数或将函数作为返回值输出
    <script>
        function fn(callback){
            callback&callback();
        }
        fn(function(){alert('hi')})
    </script>
    <script>
        function fn(){
            return function(){}
        }
        fn();
    </script>
此时fn就是一个高阶函数
函数就是一种数据类型，同样可以作为参数，传递给另外一个参数使用，最典型的就是作为回调函数

闭包
    变量作用域
        变量根据作用域的不同分为两种：全局变量和局部变量
        1.函数内部可以使用全局变量
        2.函数外部不可以使用局部变量
        3.当函数执行完毕，本作用域内的局部变量会销毁
    什么是闭包
        闭包是有权访问另一个函数作用域中变量的函数
        简单理解就是，一个作用域可以访问另外一个函数内部的局部变量
        被访问的变量所在的函数就是闭包函数
        function fn(){
            var num=10;
            function fun(){
                console.log(num);
            }
            fun();
        }
        fn();
        fn外面的作用域可以访问fn内部的局部变量
            function fn(){
                var num=10;
                function fun(){
                    console.log(num);
                }
                return fun;
            }
            var f=fn();
            f();
            //类似于
            // var f=function fun(){
            //    console.log(num);
            // }
    闭包应用-点击li输出当前li的索引号
        1.利用动态添加属性的方式
        for(var i=0;i<lis.length;i++){
            lis[i].index=i;
            lis[i].onclick=function(){
                //console.log(i);//不能直接输出i  结果为4
                console.log(this.index);
            }
        }
        2.利用闭包的方式得到当前小li 的索引号
        for(var i=0;i<lis.length;i++){
            //利用for循环建立了4个立即执行函数
            //立即执行函数也称为小闭包因为立即执行函数里面的任何一个函数都可以使用它的i这个变量
            (function(i){
                lis[i].onclick=function(){
                    console.log(i);
                }
            })(i)
        }

        3秒钟之后，打印所有li元素的内容
        //定时器中的函数用到了立即执行函数中的i变量
        for(var i=0;i<lis.length;i++){
           (function(i){
                setTimeout(function(){
                    console.log(lis[i].innerHTML);
                },3000)
           })(i)
        }
浅拷贝和深拷贝
    1.浅拷贝只是拷贝一层，更深层对象级别的只拷贝引用  把地址拷贝给了新对象
    2.深拷贝多层，每一级别的数据都会拷贝
    3.Object.assign(target,...sources) es6新增方法可以浅拷贝



